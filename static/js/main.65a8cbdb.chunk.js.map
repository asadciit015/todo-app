{"version":3,"sources":["TaskList.js","components/toggle.js","components/searchBar.jsx","components/TaskDeleteDialog.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TaskList","props","tasksList","toggleComplete","handleClickOpen","setUpdates","map","task","key","className","Checkbox","checked","complete","color","onClick","id","TextareaAutosize","style","textDecoration","type","value","onChange","e","target","done","fill","SimpleMenu","React","useState","anchorEl","setAnchorEl","updateTasksToShow","filter","sortingTaskAscending","sortingTaskDescending","sortingCompletedLast","sortingCompletedTop","IconButton","edge","aria-label","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","useStyles","makeStyles","theme","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","CustomizedInputBase","classes","Paper","InputBase","placeholder","searchTask","Transition","forwardRef","ref","Slide","direction","AlertDialogSlide","DeleteTask","selectedTask","Button","variant","Dialog","TransitionComponent","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","MyField","styled","TextField","position","bottom","App","handleInput","setState","currentTask","shortid","generate","addTask","preventDefault","newTask","state","newTasks","tasks","FilteredTasks","text","forEach","search","ascending","descending","completedTop","completedLast","this","includes","temp","sort","a","b","localeCompare","completedTasks","inCompletedTasks","Set","Typography","onSubmit","fullWidth","label","Component","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.65a8cbdb.chunk.js","sourcesContent":["import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport DoneAllOutlinedIcon from '@material-ui/icons/DoneAllOutlined';\nimport './TaskList.css';\n\nfunction TaskList(props) {\n\tconst { tasksList, toggleComplete, handleClickOpen, setUpdates } = props;\n\n\treturn tasksList.map((task) => (\n\t\t<div key={task.key} className='taskList'>\n\t\t\t<span>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={task.complete}\n\t\t\t\t\tcolor='#346D6A'\n\t\t\t\t\tonClick={() => toggleComplete(task.id)}\n\t\t\t\t/>\n\t\t\t</span>\n\t\t\t<p>\n\t\t\t\t<TextareaAutosize\n\t\t\t\t\tclassName='TextareaAutosize'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttextDecoration: task.complete ? 'line-through' : '',\n\t\t\t\t\t}}\n\t\t\t\t\ttype='text'\n\t\t\t\t\tid={task.id}\n\t\t\t\t\tvalue={task.task}\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tsetUpdates(e.target.value, task.id);\n\t\t\t\t\t}}\n\t\t\t\t></TextareaAutosize>\n\t\t\t\t<span className='TrashIcon'>\n\t\t\t\t\t{task.done ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<DoneAllOutlinedIcon />\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t''\n\t\t\t\t\t)}\n\n\t\t\t\t\t<DeleteOutlineOutlinedIcon\n\t\t\t\t\t\tstyle={{ fill: '#346D6A' }}\n\t\t\t\t\t\tonClick={() => handleClickOpen(task)}\n\t\t\t\t\t/>\n\t\t\t\t</span>\n\t\t\t</p>\n\t\t</div>\n\t));\n}\nexport default TaskList;\n","import React from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowUpwardOutlinedIcon from '@material-ui/icons/ArrowUpwardOutlined';\nimport ArrowDownwardOutlinedIcon from '@material-ui/icons/ArrowDownwardOutlined';\n\nexport default function SimpleMenu(props) {\n\tconst [anchorEl, setAnchorEl] = React.useState(null);\n\tconst {\n\t\tupdateTasksToShow,\n\t\tfilter,\n\t\tsortingTaskAscending,\n\t\tsortingTaskDescending,\n\t\tsortingCompletedLast,\n\t\tsortingCompletedTop,\n\t} = props;\n\treturn (\n\t\t<div>\n\t\t\t<IconButton\n\t\t\t\tedge='start'\n\t\t\t\tcolor='inherit'\n\t\t\t\taria-label='menu'\n\t\t\t\tonClick={(event) => setAnchorEl(event.currentTarget)}\n\t\t\t>\n\t\t\t\t<MenuIcon />\n\t\t\t</IconButton>\n\t\t\t<Menu\n\t\t\t\tid='simple-menu'\n\t\t\t\tanchorEl={anchorEl}\n\t\t\t\tkeepMounted\n\t\t\t\topen={Boolean(anchorEl)}\n\t\t\t\tonClose={() => setAnchorEl(null)}\n\t\t\t>\n\t\t\t\t<MenuItem onClick={updateTasksToShow}>\n\t\t\t\t\t{filter ? <>Hide Completed Task</> : <>Show Completed Task</>}\n\t\t\t\t</MenuItem>\n\t\t\t\t<MenuItem onClick={sortingTaskAscending}>\n\t\t\t\t\tSort on title <ArrowDownwardOutlinedIcon />\n\t\t\t\t</MenuItem>\n\t\t\t\t<MenuItem onClick={sortingTaskDescending}>\n\t\t\t\t\tSort on title <ArrowUpwardOutlinedIcon />\n\t\t\t\t</MenuItem>\n\t\t\t\t<MenuItem onClick={sortingCompletedLast}>\n\t\t\t\t\tShow completed at last\n\t\t\t\t</MenuItem>\n\t\t\t\t<MenuItem onClick={sortingCompletedTop}>Show completed at top</MenuItem>\n\t\t\t</Menu>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tpadding: '2px 4px',\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\twidth: 800,\n\t},\n\tinput: {\n\t\tmarginLeft: theme.spacing(1),\n\t\tflex: 1,\n\t},\n}));\n\nexport default function CustomizedInputBase(props) {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<Paper className={classes.root}>\n\t\t\t<InputBase\n\t\t\t\tclassName={classes.input}\n\t\t\t\tplaceholder='Search Task'\n\t\t\t\tonChange={(e) => props.searchTask(e)}\n\t\t\t/>\n\t\t</Paper>\n\t);\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n\treturn <Slide direction='up' ref={ref} {...props} />;\n});\n\nexport default function AlertDialogSlide(props) {\n\t// const [open, setOpen] = React.useState(false);\n\n\t// const handleClickOpen = () => {\n\t// \tsetOpen(true);\n\t// };\n\tconst { DeleteTask, selectedTask, handleClickOpen } = props;\n\treturn (\n\t\t<div>\n\t\t\t<Button variant='outlined' color='primary' onClick={handleClickOpen}>\n\t\t\t\tSlide in alert dialog\n\t\t\t</Button>\n\t\t\t<Dialog\n\t\t\t\topen={props.open}\n\t\t\t\tTransitionComponent={Transition}\n\t\t\t\tkeepMounted\n\t\t\t\tonClose={() => DeleteTask()}\n\t\t\t\taria-labelledby='Delete-Task'\n\t\t\t\taria-describedby='delete-dialog-slide-description'\n\t\t\t>\n\t\t\t\t<DialogTitle id='Delete-Task'>{'Delete Task'}</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<DialogContentText id='delete-dialog-slide-description'>\n\t\t\t\t\t\tAre you sure you want to delete this task? {selectedTask.task}\n\t\t\t\t\t</DialogContentText>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={() => DeleteTask()} color='primary'>\n\t\t\t\t\t\tNO\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={() => DeleteTask(selectedTask.id)} color='primary'>\n\t\t\t\t\t\tYES\n\t\t\t\t\t</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport './App.css';\nimport TaskList from './TaskList';\nimport SimpleMenu from './components/toggle.js';\nimport CustomizedInputBase from './components/searchBar';\nimport shortid from 'shortid';\nimport AlertDialogSlide from './components/TaskDeleteDialog.jsx';\n\n//material UI libraries\nimport { styled } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { TextField } from '@material-ui/core';\n\nconst MyField = styled(TextField)({\n\twidth: '100%',\n\tposition: 'relative',\n\tbottom: '0px',\n});\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttasks: [],\n\t\t\tfilter: true,\n\t\t\tsearch: '',\n\t\t\tcurrentTask: {\n\t\t\t\ttask: '',\n\t\t\t},\n\t\t\topen: false,\n\t\t\tdone: false,\n\t\t\tascending: false,\n\t\t\tdescending: false,\n\t\t\tcompletedTop: false,\n\t\t\tcompletedLast: false,\n\t\t\tselectedTask: {},\n\t\t};\n\t}\n\n\t// function for input from user\n\thandleInput = (e) => {\n\t\tthis.setState({\n\t\t\tcurrentTask: {\n\t\t\t\ttask: e.target.value,\n\t\t\t\tid: shortid.generate(),\n\t\t\t\tcomplete: false,\n\t\t\t},\n\t\t});\n\t};\n\t// function to add task which user inputs\n\taddTask = (e) => {\n\t\te.preventDefault();\n\t\tconst newTask = this.state.currentTask;\n\t\tif (newTask.task !== '') {\n\t\t\tconst newTasks = [newTask, ...this.state.tasks];\n\t\t\tthis.setState({\n\t\t\t\ttasks: newTasks,\n\t\t\t\tcurrentTask: {\n\t\t\t\t\ttask: '',\n\t\t\t\t\tid: '',\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n\t// function to delete the task\n\tDeleteTask = (id) => {\n\t\tif (id) {\n\t\t\tconst FilteredTasks = this.state.tasks.filter((task) => task.id !== id);\n\t\t\tthis.setState({\n\t\t\t\ttasks: FilteredTasks,\n\t\t\t\topen: false,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\topen: false,\n\t\t\t});\n\t\t}\n\t};\n\t// function to edit the task\n\tsetUpdates = (text, id) => {\n\t\tconst tasks = this.state.tasks;\n\t\ttasks.forEach((task) => {\n\t\t\tif (task.id === id) {\n\t\t\t\ttask.task = text;\n\t\t\t\ttask.done = true;\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\ttasks: tasks,\n\t\t});\n\t};\n\t// function for done tasks\n\ttoggleComplete = (id) => {\n\t\tthis.setState({\n\t\t\ttasks: this.state.tasks.map((task) => {\n\t\t\t\tif (task.id === id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...task,\n\t\t\t\t\t\tcomplete: !task.complete,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn task;\n\t\t\t\t}\n\t\t\t}),\n\t\t});\n\t};\n\t//  function to show completed task on screen\n\tupdateTasksToShow = () => {\n\t\tthis.setState({\n\t\t\tfilter: !this.state.filter,\n\t\t});\n\t};\n\t//  function to show the delete task dialogue box\n\thandleClickOpen = (task) => {\n\t\tthis.setState({\n\t\t\tselectedTask: task,\n\t\t\topen: true,\n\t\t});\n\t};\n\t// function for search Task\n\tsearchTask = (e) => {\n\t\tthis.setState({ search: e.target.value });\n\t};\n\t// function to sort tasks in ascending way\n\tsortingTaskAscending = () => {\n\t\tthis.setState({\n\t\t\tascending: !this.state.ascending,\n\t\t});\n\t};\n\t// function to sort tasks in descending way\n\tsortingTaskDescending = () => {\n\t\tthis.setState({\n\t\t\tdescending: !this.state.descending,\n\t\t});\n\t};\n\tsortingCompletedTop = () => {\n\t\tthis.setState({\n\t\t\tcompletedTop: !this.completedTop,\n\t\t});\n\t};\n\tsortingCompletedLast = () => {\n\t\tthis.setState({\n\t\t\tcompletedLast: !this.completedLast,\n\t\t});\n\t};\n\trender() {\n\t\tlet tasksList = this.state.tasks;\n\n\t\tif (!this.state.filter) {\n\t\t\ttasksList = this.state.tasks.filter((task) => !task.complete);\n\t\t}\n\t\tif (this.state.search !== '') {\n\t\t\ttasksList = tasksList.filter((task) =>\n\t\t\t\ttask.task.includes(this.state.search)\n\t\t\t);\n\t\t}\n\t\tif (this.state.descending) {\n\t\t\tlet temp = [...this.state.tasks];\n\t\t\ttemp = temp.sort((a, b) => b.task.localeCompare(a.task));\n\t\t\tthis.setState({\n\t\t\t\ttasks: temp,\n\t\t\t\tdescending: false,\n\t\t\t});\n\t\t}\n\t\tif (this.state.ascending) {\n\t\t\tlet temp = [...this.state.tasks];\n\t\t\ttemp = temp.sort((a, b) => a.task.localeCompare(b.task));\n\t\t\tthis.setState({\n\t\t\t\ttasks: temp,\n\t\t\t\tascending: false,\n\t\t\t});\n\t\t}\n\t\tif (this.state.completedTop) {\n\t\t\tlet temp = [...this.state.tasks];\n\t\t\tlet completedTasks = temp\n\t\t\t\t.filter((task) => task.complete === true)\n\t\t\t\t.sort((a, b) => a.task.localeCompare(b.task));\n\t\t\tlet inCompletedTasks = temp\n\t\t\t\t.filter((task) => task.complete === false)\n\t\t\t\t.sort((a, b) => a.task.localeCompare(b.task));\n\t\t\tlet tasksList = [...new Set([...completedTasks, ...inCompletedTasks])];\n\t\t\tthis.setState({\n\t\t\t\ttasks: tasksList,\n\t\t\t\tcompletedTop: false,\n\t\t\t});\n\t\t}\n\t\tif (this.state.completedLast) {\n\t\t\tlet temp = [...this.state.tasks];\n\t\t\tlet completedTasks = temp\n\t\t\t\t.filter((task) => task.complete === true)\n\t\t\t\t.sort((a, b) => a.task.localeCompare(b.task));\n\t\t\tlet inCompletedTasks = temp\n\t\t\t\t.filter((task) => task.complete === false)\n\t\t\t\t.sort((a, b) => a.task.localeCompare(b.task));\n\t\t\tlet tasksList = [...new Set([...inCompletedTasks, ...completedTasks])];\n\t\t\tthis.setState({\n\t\t\t\ttasks: tasksList,\n\t\t\t\tcompletedLast: false,\n\t\t\t});\n\t\t}\n\n\t\treturn (\n\t\t\t<div className='main'>\n\t\t\t\t{/* main header */}\n\t\t\t\t<header>\n\t\t\t\t\t<div className='title'>\n\t\t\t\t\t\t<Typography variant='h6'> My Todo List</Typography>\n\t\t\t\t\t\t<CustomizedInputBase searchTask={this.searchTask} />\n\t\t\t\t\t\t<SimpleMenu\n\t\t\t\t\t\t\tupdateTasksToShow={this.updateTasksToShow}\n\t\t\t\t\t\t\tfilter={this.state.filter}\n\t\t\t\t\t\t\tsortingTaskAscending={this.sortingTaskAscending}\n\t\t\t\t\t\t\tsortingTaskDescending={this.sortingTaskDescending}\n\t\t\t\t\t\t\tsortingCompletedTop={this.sortingCompletedTop}\n\t\t\t\t\t\t\tsortingCompletedLast={this.sortingCompletedLast}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\t\t\t\t<div className='taskListScrolling'>\n\t\t\t\t\t{/* calling TaskList  component */}\n\t\t\t\t\t<TaskList\n\t\t\t\t\t\ttasks={this.state.tasks}\n\t\t\t\t\t\tDeleteTask={this.DeleteTask}\n\t\t\t\t\t\tsetUpdates={this.setUpdates}\n\t\t\t\t\t\tdone={this.state.done}\n\t\t\t\t\t\ttoggleComplete={this.toggleComplete}\n\t\t\t\t\t\ttasksList={tasksList}\n\t\t\t\t\t\thandleClickOpen={this.handleClickOpen}\n\t\t\t\t\t></TaskList>\n\t\t\t\t</div>\n\t\t\t\t{this.state.open && (\n\t\t\t\t\t<AlertDialogSlide\n\t\t\t\t\t\tDeleteTask={this.DeleteTask}\n\t\t\t\t\t\topen={this.state.open}\n\t\t\t\t\t\tselectedTask={this.state.selectedTask}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{/* footer section for task submission */}\n\t\t\t\t<footer className='footerStyle'>\n\t\t\t\t\t<form onSubmit={this.addTask}>\n\t\t\t\t\t\t<MyField\n\t\t\t\t\t\t\tfullWidth='true'\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tlabel='Enter your task and press enter'\n\t\t\t\t\t\t\tvariant='filled'\n\t\t\t\t\t\t\tvalue={this.state.currentTask.task}\n\t\t\t\t\t\t\tonChange={this.handleInput}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</form>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}