{"version":3,"sources":["TaskList.js","components/toggle.js","components/DeleteDialog.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TaskList","props","tasksList","toggleComplete","handleClickOpen","setUpdates","map","task","key","className","Checkbox","checked","complete","color","onClick","id","TextareaAutosize","style","textDecoration","type","value","onChange","e","target","done","fill","SimpleMenu","React","useState","anchorEl","setAnchorEl","updateTasksToShow","filter","IconButton","edge","aria-label","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","ResponsiveDialog","DeleteTask","selectedTask","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","MyField","styled","TextField","width","position","bottom","App","handleInput","setState","currentTask","shortid","generate","addTask","preventDefault","newTask","state","newTasks","tasks","FilteredTasks","text","this","onSubmit","fullWidth","label","variant","Component","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.469d1ca5.chunk.js","sourcesContent":["import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport DoneAllOutlinedIcon from '@material-ui/icons/DoneAllOutlined';\nimport './TaskList.css';\n\nfunction TaskList(props) {\n\tconst { tasksList, toggleComplete, handleClickOpen, setUpdates } = props;\n\n\treturn tasksList.map((task) => (\n\t\t<div key={task.key} className='taskList'>\n\t\t\t<span className='TaskCheck'>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={task.complete}\n\t\t\t\t\tcolor='#346D6A'\n\t\t\t\t\tonClick={() => toggleComplete(task.id)}\n\t\t\t\t/>\n\t\t\t</span>\n\t\t\t<p>\n\t\t\t\t<TextareaAutosize\n\t\t\t\t\tclassName='TextareaAutosize'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttextDecoration: task.complete ? 'line-through' : '',\n\t\t\t\t\t}}\n\t\t\t\t\ttype='text'\n\t\t\t\t\tid={task.id}\n\t\t\t\t\tvalue={task.task}\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tsetUpdates(e.target.value, task.id);\n\t\t\t\t\t}}\n\t\t\t\t></TextareaAutosize>\n\t\t\t\t<span className='TrashIcon'>\n\t\t\t\t\t{task.done ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<DoneAllOutlinedIcon />\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t''\n\t\t\t\t\t)}\n\n\t\t\t\t\t<DeleteOutlineOutlinedIcon\n\t\t\t\t\t\tstyle={{ fill: '#346D6A' }}\n\t\t\t\t\t\tonClick={() => handleClickOpen(task)}\n\t\t\t\t\t/>\n\t\t\t\t</span>\n\t\t\t</p>\n\t\t</div>\n\t));\n}\nexport default TaskList;\n","import React from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nexport default function SimpleMenu(props) {\n\tconst [anchorEl, setAnchorEl] = React.useState(null);\n\tconst { updateTasksToShow, filter } = props;\n\treturn (\n\t\t<div>\n\t\t\t<IconButton\n\t\t\t\tedge='start'\n\t\t\t\tcolor='inherit'\n\t\t\t\taria-label='menu'\n\t\t\t\tonClick={(event) => setAnchorEl(event.currentTarget)}\n\t\t\t>\n\t\t\t\t<MenuIcon />\n\t\t\t</IconButton>\n\t\t\t<Menu\n\t\t\t\tid='simple-menu'\n\t\t\t\tanchorEl={anchorEl}\n\t\t\t\tkeepMounted\n\t\t\t\topen={Boolean(anchorEl)}\n\t\t\t\tonClose={() => setAnchorEl(null)}\n\t\t\t>\n\t\t\t\t<MenuItem onClick={updateTasksToShow}>\n\t\t\t\t\t{filter ? <>Hide Completed Task</> : <>Show Completed Task</>}\n\t\t\t\t</MenuItem>\n\t\t\t</Menu>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\n\nexport default function ResponsiveDialog(props) {\n\tconst { DeleteTask, selectedTask } = props;\n\n\tconst theme = useTheme();\n\tconst fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n\treturn (\n\t\t<div>\n\t\t\t<Dialog\n\t\t\t\tfullScreen={fullScreen}\n\t\t\t\topen={props.open}\n\t\t\t\tonClose={() => DeleteTask()}\n\t\t\t\taria-labelledby='responsive-dialog-title'\n\t\t\t>\n\t\t\t\t<DialogTitle id='responsive-dialog-title'>{'Delete Task'}</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<DialogContentText>\n\t\t\t\t\t\tAre you sure you want to delete this task?\n\t\t\t\t\t</DialogContentText>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button autoFocus onClick={() => DeleteTask()} color='primary'>\n\t\t\t\t\t\tNO\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={() => DeleteTask(selectedTask.id)}\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t>\n\t\t\t\t\t\tYES\n\t\t\t\t\t</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport './App.css';\nimport TaskList from './TaskList';\nimport SimpleMenu from './components/toggle.js';\nimport shortid from 'shortid';\nimport ResponsiveDialog from './components/DeleteDialog.jsx';\n\n//material UI libraries\nimport { styled } from '@material-ui/core/styles';\nimport { TextField } from '@material-ui/core';\n// custom styling for TextField\nconst MyField = styled(TextField)({\n\twidth: '100%',\n\tposition: 'relative',\n\tbottom: '0px',\n});\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttasks: [],\n\t\t\tfilter: true,\n\t\t\tcurrentTask: {\n\t\t\t\ttask: '',\n\t\t\t},\n\t\t\topen: false,\n\t\t\tdone: false,\n\t\t\tselectedTask: {},\n\t\t};\n\t}\n\n\t// function for input from user\n\thandleInput = (e) => {\n\t\tthis.setState({\n\t\t\tcurrentTask: {\n\t\t\t\ttask: e.target.value,\n\t\t\t\tid: shortid.generate(),\n\t\t\t\tcomplete: false,\n\t\t\t},\n\t\t});\n\t};\n\n\t// function to add task which user inputs\n\taddTask = (e) => {\n\t\te.preventDefault();\n\t\tconst newTask = this.state.currentTask;\n\t\tif (newTask.task !== '') {\n\t\t\tconst newTasks = [newTask, ...this.state.tasks];\n\t\t\tthis.setState({\n\t\t\t\ttasks: newTasks,\n\t\t\t\tcurrentTask: {\n\t\t\t\t\ttask: '',\n\t\t\t\t\tid: '',\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n\t// function to delete the task\n\tDeleteTask = (id) => {\n\t\tif (id) {\n\t\t\tconst FilteredTasks = this.state.tasks.filter((task) => task.id !== id);\n\t\t\tthis.setState({\n\t\t\t\ttasks: FilteredTasks,\n\t\t\t\topen: false,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\topen: false,\n\t\t\t});\n\t\t}\n\t};\n\t// function to edit the task\n\tsetUpdates = (text, id) => {\n\t\tconst tasks = this.state.tasks;\n\t\ttasks.map((task) => {\n\t\t\tif (task.id === id) {\n\t\t\t\ttask.task = text;\n\t\t\t\ttask.done = true;\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\ttasks: tasks,\n\t\t});\n\t};\n\t// function for done tasks\n\ttoggleComplete = (id) => {\n\t\tthis.setState({\n\t\t\ttasks: this.state.tasks.map((task) => {\n\t\t\t\tif (task.id === id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...task,\n\t\t\t\t\t\tcomplete: !task.complete,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn task;\n\t\t\t\t}\n\t\t\t}),\n\t\t});\n\t};\n\t//  function to show completed task on screen\n\tupdateTasksToShow = () => {\n\t\tthis.setState({\n\t\t\tfilter: !this.state.filter,\n\t\t});\n\t};\n\t//  function to show the delete task dialogue box\n\thandleClickOpen = (task) => {\n\t\tthis.setState({\n\t\t\tselectedTask: task,\n\t\t\topen: true,\n\t\t});\n\t};\n\n\trender() {\n\t\tlet tasksList = this.state.tasks;\n\t\tif (!this.state.filter) {\n\t\t\ttasksList = this.state.tasks.filter((task) => !task.complete);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className='main'>\n\t\t\t\t{/* main header */}\n\t\t\t\t<header>\n\t\t\t\t\t<div className='title'>\n\t\t\t\t\t\t<h3>My Todo List</h3>\n\t\t\t\t\t\t<SimpleMenu\n\t\t\t\t\t\t\tupdateTasksToShow={this.updateTasksToShow}\n\t\t\t\t\t\t\tfilter={this.state.filter}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\t\t\t\t<div className='taskListScrolling'>\n\t\t\t\t\t{/* calling TaskList  component */}\n\t\t\t\t\t<TaskList\n\t\t\t\t\t\ttasks={this.state.tasks}\n\t\t\t\t\t\tDeleteTask={this.DeleteTask}\n\t\t\t\t\t\tsetUpdates={this.setUpdates}\n\t\t\t\t\t\tdone={this.state.done}\n\t\t\t\t\t\ttoggleComplete={this.toggleComplete}\n\t\t\t\t\t\ttasksList={tasksList}\n\t\t\t\t\t\thandleClickOpen={this.handleClickOpen}\n\t\t\t\t\t></TaskList>\n\t\t\t\t</div>\n\t\t\t\t{this.state.open && (\n\t\t\t\t\t<ResponsiveDialog\n\t\t\t\t\t\tDeleteTask={this.DeleteTask}\n\t\t\t\t\t\topen={this.state.open}\n\t\t\t\t\t\tselectedTask={this.state.selectedTask}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{/* footer section for task submission */}\n\t\t\t\t<footer className='footerStyle'>\n\t\t\t\t\t<form onSubmit={this.addTask}>\n\t\t\t\t\t\t<MyField\n\t\t\t\t\t\t\tfullWidth='true'\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tlabel='Enter your task and press enter'\n\t\t\t\t\t\t\tvariant='filled'\n\t\t\t\t\t\t\tvalue={this.state.currentTask.task}\n\t\t\t\t\t\t\tonChange={this.handleInput}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</form>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}